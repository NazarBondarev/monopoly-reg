from aiogram import executor, exceptions, Dispatcher, Bot, types
import asyncio
from config import API_TOKEN
from keyboards import general_menu, Keyboards
from pprint import pprint
from dbreqs import Database
from datetime import datetime

bot = Bot(API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
dates = Database().get_tables()



@dp.message_handler(commands = 'start')
async def start(message: types.Message):
    await message.answer(f"‚úã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}!</b>\n"
                         f"ü§ñ–Ø –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∏–≥—Ä–µ <b>¬´–ú–æ–Ω–æ–ø–æ–ª–∏—è¬ª</b>\n\n"
                         f"‚¨áÔ∏è–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", reply_markup=general_menu)


@dp.message_handler(lambda message: message.text == "üí¨–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã")
async def view_rules(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –ª–∏–±–æ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é telega.ph")

@dp.message_handler(lambda message: message.text == "üìÜ–î–∞—Ç—ã –∏–≥—Ä")
async def view_dates(message: types.Message):
    keyb,dates = Keyboards().get_dates_keyb()

    if keyb:
        await message.answer("üóí<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä</b>\n\nüí°<em>–ß–∏—Å–ª–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç</em>", reply_markup=keyb)
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –Ω–µ—Ç!")
    
@dp.message_handler(lambda message: message.text == "üåü–ú–æ–∏ –∏–≥—Ä—ã")
async def view_games(message: types.Message):
    history = Keyboards().get_user_games(message.from_user.id)
    if history:
        await message.answer("üìí–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∏–≥—Ä\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             "<em>üîÑ - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞\–∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                             "‚úÖ - –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∏–≥—Ä–∞ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</em>\n"
                             "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=history)



@dp.callback_query_handler(lambda call: call.data[0] not in ("‚úÖ", "üîÑ"))
async def select_date(call: types.CallbackQuery):
    dates = Database().get_tables()

    if call.data in dates:
        status = Database().get_users(call.from_user.id, call.data[0:-4])
        if status and call.data[-3:] != "[10]":
            Database().add_new_user(call.from_user.id, call.from_user.first_name, str(datetime.now()), call.data[0:-4])
            Database().add_to_history(call.from_user.id, call.from_user.first_name, str(datetime.now()), call.data[0:-4])
            keyb,dates = Keyboards().get_dates_keyb()
            users = Database().get_usernames(call.data[0:-4])
            temp = []
            i = 0
            for item in users:
                i+=1
                temp.append(f"{i}. {item}")
            users = "\n".join(temp)
            await call.message.edit_text(text=f"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∏–≥—Ä—É\n"
                                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>{call.data[0:-4]}</b>!\n–ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µüòâ\n"
                                                f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:</b>\n{users}")
        elif call.data[-3:] == "[10]":
            await call.message.answer("üôÖ–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ —ç—Ç—É –∏–≥—Ä—É –∑–∞–Ω—è—Ç—ã")
        elif not status:
            await call.answer("‚ùå–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É")
    else:
        print(False)
    
@dp.callback_query_handler(lambda call: call.data[0] in ("‚úÖ", "üîÑ"))
async def view_user_game(call: types.CallbackQuery):
    action = call.data[0]
    print(action)
    usernames = Database().get_usernames(call.data.replace(action, ''))
    temp = []
    i = 0
    for item in usernames:
        i+=1
        temp.append(f"{i}. {item}")
    users = "\n".join(temp)

    await call.message.answer(f"<b>{call.data}</b>\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                             f"{users}\n"
                             f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)